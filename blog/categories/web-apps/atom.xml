<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Web Apps | Prab's Code Blog]]></title>
  <link href="http://prabhakar97.github.io/blog/categories/web-apps/atom.xml" rel="self"/>
  <link href="http://prabhakar97.github.io/"/>
  <updated>2018-03-17T20:13:24+05:30</updated>
  <id>http://prabhakar97.github.io/</id>
  <author>
    <name><![CDATA[Prabhakar Kumar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Compile Goaccess From Source on CentOS 7]]></title>
    <link href="http://prabhakar97.github.io/blog/2016/07/08/compile-goaccess-from-source-on-centos-7/"/>
    <updated>2016-07-08T07:30:32+05:30</updated>
    <id>http://prabhakar97.github.io/blog/2016/07/08/compile-goaccess-from-source-on-centos-7</id>
    <content type="html"><![CDATA[<p><a href="https://goaccess.io">Goaccess</a> is a neat little utility which scans through your web server (I use nginx) logs and generates a nice HTML report of
your site&rsquo;s access statistics. Here is a <a href="http://rt.goaccess.io">sample from their site</a>. I run CentOS 7 on an EC2 Instance where I run a pet project. I wanted a light web analyzer that just works. I have
<a href="https://fedoraproject.org/wiki/EPEL">epel</a> enabled on my instance so I just installed goaccess by <code>sudo yum install goaccess</code>. It worked and I was able
to see some stats. But then I figured out that the version from repositories is quite an old one at 0.9.8. The latest one is 1.0.2 from the website.
So, I just uninstalled it <code>sudo yum remove goaccess</code>.</p>

<p>I downloaded the source tarball and after a few hiccups I was able to get it running. There are two quirks you need to watch out for. First one is
that, enabling geoip in goaccess requires installation of maxmind&rsquo;s geoip database. The installed database from yum is very small, so you need to
update it and change symlink /usr/share/GeoIP/GeoIP.dat to point to /usr/share/GeoIP/GeoLiteCountry.dat. Second quirk is that by default the configure
script doesn&rsquo;t figure out the geoip devel libs path so you need to manually point to it while configuring.</p>

<pre><code class="sh">sudo yum install GeoIP
geoipupdate
sudo rm /usr/share/GeoIP.dat
sudo ln -s /usr/share/{GeoLiteCountry,GeoIP}.dat 

wget http://tar.goaccess.io/goaccess-1.0.2.tar.gz
tar -xzvf goaccess-1.0.2.tar.gz
cd goaccess-1.0.2
LD_FLAGS='-L/usr/lib64/' ./configure --enable-utf8 --enable-geoip
make
sudo make install
</code></pre>

<p>I also created a daily crontab entry to generate reports daily and put it in my <code>public</code> folder of rails directory, all the files in which I serve
statically from nginx. So I can just type <a href="http://mydomain.com/access.html">http://mydomain.com/access.html</a> and see the reports. Here is my crontab entry.</p>

<pre><code class="sh crontab">@daily /bin/zcat -f /var/log/nginx/access.log* | /usr/local/bin/goaccess -a -o /home/ec2-user/my_rails_dir/public/access.html
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Starting With Yesod on Arch Linux]]></title>
    <link href="http://prabhakar97.github.io/blog/2016/06/24/starting-with-yesod-on-arch-linux/"/>
    <updated>2016-06-24T05:29:39+05:30</updated>
    <id>http://prabhakar97.github.io/blog/2016/06/24/starting-with-yesod-on-arch-linux</id>
    <content type="html"><![CDATA[<p>As part of my eagerness to learn Haskell, I thought it might be a good idea to start building real world applications in Haskell. I chose
<a href="http://www.yesodweb.com/">Yesod</a> to start building a dynamic web application backed by as database. However, the getting started page on
Yesod website didn&rsquo;t exactly work as advertised, probably because the <a href="http://docs.haskellstack.org/en/stable/README/">Haskell Stack</a>
had some API change. These steps worked for me.</p>

<ul>
<li>Install haskell-stack. It lets you develop, build and test Haskell apps without creating dependency version issues across projects.
If you are coming from a ruby world, it is similar to rbenv.</li>
</ul>


<p><code>sudo pacman -S haskell-stack</code></p>

<ul>
<li>Checkout the <em>yesod-mongodb</em> template. This is going to create a <code>haskell-webapp</code> directory and checkout stuff from the <code>yesod-mongo</code> template.
Make sure that you don&rsquo;t provide a directory name which is the name of a package, like yesod, ghci etc.</li>
</ul>


<p><code>stack new haskell-webapp yesod-mongo</code></p>

<ul>
<li><p>Install <a href="https://aur.archlinux.org/packages/libtinfo/">libtinfo from AUR</a> because Arch screwed up (from stack perspective). There is
another nuance to take care of. Edit the <em>PKGBUILD</em> and ensure that the line that simlinks <code>/usr/lib/libtinfo.so.5</code> is uncommented. Otherwise
the next step doesn&rsquo;t work.</p></li>
<li><p>Setup GHCi and friends.</p></li>
</ul>


<p><code>stack build yesod-bin cabal-install --install-ghc</code></p>

<ul>
<li>Build the libs.</li>
</ul>


<p><code>stack build</code></p>

<ul>
<li>Hello World!</li>
</ul>


<p><code>stack exec -- yesod devel</code></p>

<p>To access your server visit <a href="http://localhost:3000">http://localhost:3000</a></p>
]]></content>
  </entry>
  
</feed>
