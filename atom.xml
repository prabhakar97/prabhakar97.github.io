<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Prab's Code Blog]]></title>
  <link href="http://prabhakar97.github.io/atom.xml" rel="self"/>
  <link href="http://prabhakar97.github.io/"/>
  <updated>2016-06-23T20:50:01-04:00</updated>
  <id>http://prabhakar97.github.io/</id>
  <author>
    <name><![CDATA[Prabhakar Kumar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Starting with Yesod on Arch Linux]]></title>
    <link href="http://prabhakar97.github.io/blog/2016/06/23/starting-with-yesod-on-arch-linux/"/>
    <updated>2016-06-23T19:59:39-04:00</updated>
    <id>http://prabhakar97.github.io/blog/2016/06/23/starting-with-yesod-on-arch-linux</id>
    <content type="html"><![CDATA[<p>As part of my eagerness to learn Haskell, I thought it might be a good idea to start building real world applications in Haskell. I chose
<a href="http://www.yesodweb.com/">Yesod</a> to start building a dynamic web application backed by as database. However, the getting started page on
Yesod website didn&rsquo;t exactly work as advertised, probably because the <a href="http://docs.haskellstack.org/en/stable/README/">Haskell Stack</a>
had some API change. These steps worked for me.</p>

<ul>
<li>Install haskell-stack. It lets you develop, build and test Haskell apps without creating dependency version issues across projects.
If you are coming from a ruby world, it is similar to rbenv.</li>
</ul>


<p><code>sudo pacman -S haskell-stack</code></p>

<ul>
<li>Checkout the <em>yesod-mongodb</em> template. This is going to create a <code>yesod</code> directory and checkout stuff from the <code>yesod-mongo</code> template.</li>
</ul>


<p><code>stack new yesod yesod-mongo</code></p>

<ul>
<li><p>Install <a href="https://aur.archlinux.org/packages/libtinfo/">libtinfo from AUR</a> because Arch screwed up (from stack perspective). There is
another nuance to take care of. Edit the <em>PKGBUILD</em> and ensure that the line that simlinks <code>/usr/lib/libtinfo.so.5</code> is uncommented. Otherwise
the next step doesn&rsquo;t work.</p></li>
<li><p>Setup GHCi and friends.</p></li>
</ul>


<p><code>stack build yesod-bin cabal-install --install-ghc</code></p>

<ul>
<li>Build the libs.</li>
</ul>


<p><code>stack build</code></p>

<p>This step is currently failing due to an <a href="https://github.com/commercialhaskell/stack/issues/595">issue</a> in <code>stack</code>. I will update the blog
post as soon as I realize it is fixed.</p>

<ul>
<li>Hello World!</li>
</ul>


<p><code>stack exec -- yesod devel</code></p>

<p>To access your server visit <a href="http://localhost:3000">http://localhost:3000</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Functional Programming Series - Part 1]]></title>
    <link href="http://prabhakar97.github.io/blog/2016/05/13/getting-started-with-haskell/"/>
    <updated>2016-05-13T20:02:00-04:00</updated>
    <id>http://prabhakar97.github.io/blog/2016/05/13/getting-started-with-haskell</id>
    <content type="html"><![CDATA[<p>I have been intrigued by functional programming for past couple of years, but never quite prioritized it bigtime. Recently I came across this amazing talk which inspired me
to go all-in to learn FP.</p>

<div class="embed-video-container"><iframe src="//www.youtube.com/embed/E8I19uA-wGY" allowfullscreen></iframe></div>


<p>I chose Haskell as my preferred language and started with the book <a href="http://www.amazon.com/dp/0954300696">The Haskell Road to Logic, Maths and Programming</a>. I found the first
chapter really interesting.</p>

<p>I started solving exercises from the book. This post and a few subsequent ones will document my solutions to some of the exercise problems. These solutions may not be most concise
or efficient because I am just beginning to learn Haskell.</p>

<blockquote><p>Define a method removeFst which removes the first instance of an element from a list</p></blockquote>

<figure class='code'><figcaption><span>removeFst.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='hs'><span class='line'><span class="nf">removeFst</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Eq</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class='line'><span class="nf">removeFst</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="n">y</span> <span class="ow">=</span> <span class="kr">if</span> <span class="n">x</span> <span class="o">==</span> <span class="n">y</span>
</span><span class='line'>                      <span class="kr">then</span> <span class="n">xs</span>
</span><span class='line'>                        <span class="kr">else</span> <span class="n">x</span> <span class="kt">:</span> <span class="n">removeFst</span> <span class="n">xs</span> <span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Define a function which counts number of instances of an element in a list</p></blockquote>

<figure class='code'><figcaption><span>countChars.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='hs'><span class='line'><span class="nf">countChars</span> <span class="ow">::</span> <span class="kt">Char</span> <span class="ow">-&gt;</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Int</span>
</span><span class='line'><span class="nf">countChars</span> <span class="n">y</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="mi">0</span>
</span><span class='line'><span class="nf">countChars</span> <span class="n">y</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="o">|</span> <span class="n">y</span> <span class="o">==</span> <span class="n">x</span> <span class="ow">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">countChars</span> <span class="n">y</span> <span class="n">xs</span>
</span><span class='line'>                    <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">countChars</span> <span class="n">y</span> <span class="n">xs</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Define a function named blowUp that takes an string and creates a new string from it by repeating ith character in i times. For example: abcdef should return abbcccddddeeeeeffffff</p></blockquote>

<figure class='code'><figcaption><span>blowUp.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='hs'><span class='line'><span class="nf">blowUp</span> <span class="ow">::</span> <span class="kt">Int</span> <span class="ow">-&gt;</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">String</span>
</span><span class='line'><span class="nf">blowUp</span> <span class="n">n</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="ow">=</span> <span class="n">take</span> <span class="n">n</span> <span class="p">[</span><span class="n">x</span><span class="p">,</span><span class="n">x</span><span class="o">..</span><span class="p">]</span>
</span><span class='line'><span class="nf">blowUp</span> <span class="n">n</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="p">(</span><span class="n">blowUp</span> <span class="n">n</span> <span class="p">[</span><span class="n">x</span><span class="p">])</span> <span class="o">++</span> <span class="p">(</span><span class="n">blowUp</span> <span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="n">xs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Write a function to sort a list of orderable elements</p></blockquote>

<p>This is a translation of the famous quick sort algorithm to Haskell.</p>

<figure class='code'><figcaption><span>sort.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='hs'><span class='line'><span class="nf">sort</span> <span class="ow">::</span> <span class="p">(</span><span class="kt">Ord</span> <span class="n">a</span><span class="p">)</span> <span class="ow">=&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="ow">-&gt;</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span>
</span><span class='line'><span class="nf">sort</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
</span><span class='line'><span class="nf">sort</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="ow">=</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span>
</span><span class='line'><span class="nf">sort</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="ow">=</span> <span class="n">sort</span> <span class="n">greater</span> <span class="o">++</span> <span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">++</span> <span class="n">sort</span> <span class="n">lesser</span>
</span><span class='line'>                <span class="kr">where</span> <span class="n">greater</span> <span class="ow">=</span> <span class="p">[</span><span class="n">y</span> <span class="o">|</span> <span class="n">y</span> <span class="ow">&lt;-</span> <span class="n">xs</span><span class="p">,</span> <span class="n">y</span> <span class="o">&gt;</span> <span class="n">x</span><span class="p">]</span>
</span><span class='line'>                      <span class="n">lesser</span> <span class="ow">=</span> <span class="p">[</span><span class="n">y</span> <span class="o">|</span> <span class="n">y</span> <span class="ow">&lt;-</span> <span class="n">xs</span><span class="p">,</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">x</span> <span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Write a function that takes a big string and a small string and tells whether the big string starts with the small string</p></blockquote>

<figure class='code'><figcaption><span>startWith.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='hs'><span class='line'><span class="nf">startWith</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
</span><span class='line'><span class="nf">startWith</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="ow">=</span> <span class="n">y</span> <span class="o">==</span> <span class="n">x</span>
</span><span class='line'><span class="nf">startWith</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="p">(</span><span class="n">y</span><span class="kt">:</span><span class="n">ys</span><span class="p">)</span> <span class="ow">=</span> <span class="n">y</span> <span class="o">==</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">startWith</span> <span class="n">xs</span> <span class="n">ys</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Write a function that takes a big string and a small string and tells whether the big string contains the small string as a substring</p></blockquote>

<p>I use the previously defined startWith function to solve this.</p>

<figure class='code'><figcaption><span>substring.hs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='hs'><span class='line'><span class="nf">contains</span> <span class="ow">::</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">String</span> <span class="ow">-&gt;</span> <span class="kt">Bool</span>
</span><span class='line'><span class="nf">contains</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">True</span>
</span><span class='line'><span class="nf">contains</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="n">y</span> <span class="ow">=</span> <span class="n">startWith</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="n">y</span> <span class="o">||</span> <span class="n">startWith</span> <span class="n">xs</span> <span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Start/restart unicorn safely without downtime]]></title>
    <link href="http://prabhakar97.github.io/blog/2015/11/22/start-slash-restart-unicorn-safely-without-downtime/"/>
    <updated>2015-11-22T00:42:00-05:00</updated>
    <id>http://prabhakar97.github.io/blog/2015/11/22/start-slash-restart-unicorn-safely-without-downtime</id>
    <content type="html"><![CDATA[<p><a href="http://unicorn.bogomips.org/">Unicorn</a> is a cool application server for Rails. If you have a high traffic website, you would like to restart Unicorn without any downtime, upon a new
code deployment or a Gem update which updates unicorn. I wrote an script, exactly for this purpose after learning signal handling basics of Unicorn. Here&rsquo;s the script. The comments
are self-explanatory and fairly give the idea of what is happening.</p>

<figure class='code'><figcaption><span>start_uniorn</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Check if unicorn is already running</span>
</span><span class='line'><span class="nv">unicorn_pid</span><span class="o">=</span><span class="k">$(</span>ps -ef | grep <span class="s2">&quot;unicorn_rails master&quot;</span> | grep -v grep | awk <span class="s1">&#39;{print $2}&#39;</span><span class="k">)</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> ! -z <span class="nv">$unicorn_pid</span> <span class="o">]]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;Unicorn is already running. Sending USR2 to it&quot;</span>
</span><span class='line'>  <span class="nb">kill</span> -USR2 <span class="nv">$unicorn_pid</span>
</span><span class='line'>  <span class="c"># Wait till new master comes up so two instances of workers are there</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">[[</span> <span class="k">$(</span>ps -ef | grep <span class="s1">&#39;unicorn_rails worker\[0\]&#39;</span> | grep -v grep | wc -l<span class="k">)</span> -ne 2 <span class="o">]]</span>; <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;Waiting till new master comes up and spawns new workers&quot;</span>
</span><span class='line'>    sleep 1
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'>  <span class="c"># Send WINCH to old master</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;Winching ID $unicorn_pid&quot;</span>
</span><span class='line'>  <span class="nb">kill</span> -WINCH <span class="nv">$unicorn_pid</span>
</span><span class='line'>  <span class="c"># Wait till old workers die</span>
</span><span class='line'>  <span class="k">while</span> <span class="o">[[</span> <span class="k">$(</span>ps -ef | grep <span class="s1">&#39;unicorn_rails worker\[0\]&#39;</span> | grep -v grep | wc -l<span class="k">)</span> -ne 1 <span class="o">]]</span>; <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;Waiting till old workers die&quot;</span>
</span><span class='line'>    sleep 1
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;Killing ID $unicorn_pid&quot;</span>
</span><span class='line'>  <span class="nb">kill</span> -QUIT <span class="nv">$unicorn_pid</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;Start fresh copy of unicorn&quot;</span>
</span><span class='line'>  unicorn_rails -c config/unicorn.rb -D
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unicorn provides the facility to reload without losing connected clients. The process can be initiated by sending a <code>USR2</code> signal to the unicorn master process. Upon recieving this, unicorn will
spawn a new master process and name the old process as <code>unicorn master (old)</code>. The new master process will also spawn it&rsquo;s own new workers. Once you are sure that the new workers have been
spawned, you can send a <code>WINCH</code> signal to old unicorn master upon receipt of which, old unicorn will shutdown it&rsquo;s workers gracefully. Gracefully here means that the workers will die once
they are done serving their connected clients. Once the old master has shut down all it&rsquo;s workers, we send a QUIT signal to the old master which then dies peacefully. And now we have the new
unicorn loaded with new code and/or new binary. The explanation of signal behavior can be found <a href="http://unicorn.bogomips.org/SIGNALS.html">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Include filename and line number in Rails logger]]></title>
    <link href="http://prabhakar97.github.io/blog/2015/11/21/include-filename-and-line-number-in-rails-logger/"/>
    <updated>2015-11-21T23:50:00-05:00</updated>
    <id>http://prabhakar97.github.io/blog/2015/11/21/include-filename-and-line-number-in-rails-logger</id>
    <content type="html"><![CDATA[<p>Rails logging is straightforward and works out of the box. But, sometimes I feel it would
be really awesome if the log lines would contain the line number and file name which emit
the log. If you have experience with log4j in Java, you should be able to recall that we
initialize the logger and pass it a class instance. All our log lines are tagged with the
classname. That&rsquo;s cool for debugging purposes.</p>

<p>How to get that behavior in Rails? There is
one quick and dirty way. Just prepend to the log message <code>__LINE__</code> and <code>__FILE__</code> which
contain the line the code is executing and the file it is in, respectively.</p>

<figure class='code'><figcaption><span>Logger</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&quot;[</span><span class="si">#{</span><span class="bp">__FILE__</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="bp">__LINE__</span><span class="si">}</span><span class="s2">] The log message&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This just works. But shows the full file path which is kind of overkill because it produces very long log lines. The below one improves it to include just the filename.</p>

<figure class='code'><figcaption><span>Logger</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s2">&quot;[</span><span class="si">#{</span><span class="bp">__FILE__</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">last</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="bp">__LINE__</span><span class="si">}</span><span class="s2">] The log message&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, this gets the job done but makes our log statements ugly in the code. And it isn&rsquo;t DRY. If
we try to make it DRY, we can&rsquo;t. Because we can&rsquo;t assign the stuff
on the left that produces file and line number strings, into a variable, because they will refer to the line where variable is assigned, so the log statement will contain wrong value for
line number.</p>

<p>There is another way that involves ActiveSupport&rsquo;s TaggedLogging. If you use a Tagged logger,
you can associate a tag with every log message. That&rsquo;s cool too, especially for searching
through certain events in logs. TaggedLogging can be used to add file and line number, but
the usage would be similar to the above example. How about doing something that works
seamlessly behind the scenes and is DRY?</p>

<p>After some research, I wrote a class (ok, I assembled it from here and there), whose instance
can be assigned to Rails log formatter. Here it is. Just put this class in your main
application module and assign it&rsquo;s instance to rails log formatter. Apart from filename
and line number, I have also edited the log line to have some other stuff displayed in fancy
colors. Also, I don&rsquo;t print filename and line if the filename is logger.rb or starts with
log_. That&rsquo;s because it would create so much spam due to Rails internal log files or
files from various gems.
Use it and change it to your liking.</p>

<figure class='code'><figcaption><span>application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ApplicationName</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">QLogFormatter</span>
</span><span class='line'>    <span class="no">HOSTNAME</span> <span class="o">=</span> <span class="no">Socket</span><span class="o">.</span><span class="n">gethostname</span>
</span><span class='line'>    <span class="no">SEVERITY_TO_COLOR_MAP</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;DEBUG&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;35&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;INFO&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;32&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;WARN&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;33&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;ERROR&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;31&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;FATAL&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;31&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;UNKNOWN&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;37&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">severity</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">progname</span><span class="p">,</span> <span class="n">msg</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;&quot;</span> <span class="k">if</span> <span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">blank?</span> <span class="o">||</span> <span class="n">msg</span><span class="o">.</span><span class="n">strip</span><span class="o">.</span><span class="n">blank?</span><span class="p">)</span>
</span><span class='line'>      <span class="n">formatted_time</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%Y-%m-%d %H:%M:%S.&quot;</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">time</span><span class="o">.</span><span class="n">usec</span><span class="o">.</span><span class="n">to_s</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>      <span class="n">color</span> <span class="o">=</span> <span class="no">SEVERITY_TO_COLOR_MAP</span><span class="o">[</span><span class="n">severity</span><span class="o">]</span>
</span><span class='line'>      <span class="n">callee</span> <span class="o">=</span> <span class="nb">caller</span><span class="o">[</span><span class="mi">5</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>      <span class="n">callee</span> <span class="o">=</span> <span class="n">callee</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">log_line</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\033</span><span class="s2">[0;37m</span><span class="si">#{</span><span class="no">HOSTNAME</span><span class="si">}</span><span class="s2">@</span><span class="si">#{</span><span class="n">formatted_time</span><span class="si">}</span><span class="se">\033</span><span class="s2">[0m [</span><span class="se">\033</span><span class="s2">[01;</span><span class="si">#{</span><span class="n">color</span><span class="si">}</span><span class="s2">m</span><span class="si">#{</span><span class="n">severity</span><span class="si">}</span><span class="se">\033</span><span class="s2">[0m]&quot;</span>
</span><span class='line'>      <span class="k">unless</span> <span class="p">(</span><span class="n">callee</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;logger&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="n">callee</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s1">&#39;log_&#39;</span><span class="p">))</span>
</span><span class='line'>        <span class="n">log_line</span> <span class="o">+=</span> <span class="s2">&quot;[</span><span class="se">\033</span><span class="s2">[01;36m</span><span class="si">#{</span><span class="n">callee</span><span class="si">}</span><span class="se">\033</span><span class="s2">[0m]&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">log_line</span> <span class="o">+=</span> <span class="s2">&quot; </span><span class="si">#{</span><span class="n">msg</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">Application</span> <span class="o">&lt;</span> <span class="ss">Rails</span><span class="p">:</span><span class="ss">:Application</span>
</span><span class='line'>    <span class="c1"># All your other configs</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">log_formatter</span> <span class="o">=</span> <span class="no">QLogFormatter</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Earthquake alert system in nodejs]]></title>
    <link href="http://prabhakar97.github.io/blog/2015/04/27/earthquake-alert-system-in-nodejs/"/>
    <updated>2015-04-27T01:01:00-04:00</updated>
    <id>http://prabhakar97.github.io/blog/2015/04/27/earthquake-alert-system-in-nodejs</id>
    <content type="html"><![CDATA[<p>Afflicted by the recent earthquake in Nepal which took so many lives in India as well, my mind under the shower spawned up an idea of an earthquake alert system that attempts to notify people a few tens of seconds before the quake strikes.
The premise of the idea is that <em>Electromagnetic waves travel way faster than seismic waves. 300,000 KM/s vs 10 KM/s</em>. Our communication systems (internet, sms) transmit on electronic waves and even after considering some added overhead (like buffers, processing etc) they can win the race with seismic waves easily. For instance, Kathmandu to New Delhi is around 800 kilometers. A quake epicentred in Kathmandu would be felt in Delhi after around 80 seconds. If we find some way to detect the quake in Kathmandu immediately after it strikes and transmit this information over the public communication infrastructure (web, SMS etc.), we could give the people more than a minute to move to safety. I made following assumptions:</p>

<ul>
<li>There must be some research organisations which place earthquake sensors all over the world</li>
<li>At least one of those organisations, publishes such a feed in real-time</li>
<li>I could hook into that feed and as soon as some quake gets triggered, I notify the registered people via SMS/Email/Push notifications etc.</li>
</ul>


<p>Upon some quick googling, I found two such services. First was US Geological Survey.
Their <a href="http://earthquake.usgs.gov/fdsnws/event/1/">API page</a> says that they make the feed available in various formats, but the feeds are refreshed every 5 minutes.
5 minutes is too long!
Next I found something from EU. <a href="http://www.seismicportal.eu/realtime.html">Seismic Portal</a> broadcasts the feed on a web socket. Sweet! If I tap onto that feed, I would get near real time notifications.
I can connect this to some SMS gateway and I would be done. After some googling, I found out that buying a plan from SMS gateway providers have become tougher than simply clicking buy now and paying through a credit card.
This was done because of TRAI&rsquo;s strict regulations on bulk SMSes to be sent to Indian mobile numbers, to deter spammers.
I recalled reading about an app called Instapush which provides a REST API to send instant notifications to Android and iOS devices. I went through their documentation and found that wiring them was pretty easy. But I could just get notifications on my phone, not on everyone&rsquo;s. That is doable by writing an Android app which can get notified through <a href="https://developer.android.com/google/gcm/index.html">Google Cloud Messaging</a>. This one later, for now let&rsquo;s go with Instapush.</p>

<p>I created a <a href="https://developers.openshift.com/en/node-js-getting-started.html">NodeJS</a> application on Openshift. The app opens a websocket, listens to the earthquake feed, processes it, makes an API call to instapush which instantly delivers the notification on my phone. There are just two files in the codebase.</p>

<h4>Configuring instapush</h4>

<p>Instapush needs you to define two things. An event, and trackers for the event. An event is simply an event name. For example: earthquake. Trackers are placeholders in the notification message, which are populated with the values that you pass for them in the REST call to instapush. Here is my configuration for event and trackers.</p>

<p><img src="http://prabhakar97.github.io/images/quakeinstapush.png"></p>

<h4>Code</h4>

<figure class='code'><figcaption><span>client.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">sjsc</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;sockjs-client-ws&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">sjsc</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="s2">&quot;http://www.seismicportal.eu/standing_order&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">client</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connection&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Connected&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">client</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">msg</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">magnitude</span> <span class="o">=</span> <span class="nx">message</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">properties</span><span class="p">.</span><span class="nx">mag</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">place</span> <span class="o">=</span> <span class="nx">message</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">properties</span><span class="p">.</span><span class="nx">flynn_region</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">time</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nb">Date</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">message</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">properties</span><span class="p">.</span><span class="nx">time</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Earthquake of magintude &#39;</span> <span class="o">+</span> <span class="nx">magnitude</span> <span class="o">+</span> <span class="s2">&quot; in &quot;</span> <span class="o">+</span> <span class="nx">place</span> <span class="o">+</span> <span class="s2">&quot; at &quot;</span> <span class="o">+</span> <span class="nx">time</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;https://api.instapush.im/v1/post&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">headers</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;x-instapush-appid&#39;</span><span class="o">:</span> <span class="s2">&quot;MY_APP_ID&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;x-instapush-appsecret&#39;</span><span class="o">:</span> <span class="s2">&quot;MY_APP_SECRET&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s2">&quot;application/json&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">json</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">body</span><span class="o">:</span> <span class="p">{</span> <span class="s1">&#39;event&#39;</span><span class="o">:</span> <span class="s1">&#39;Earthquake&#39;</span><span class="p">,</span> <span class="s1">&#39;trackers&#39;</span><span class="o">:</span> <span class="p">{</span> <span class="s1">&#39;magnitude&#39;</span><span class="o">:</span> <span class="nx">magnitude</span><span class="p">,</span> <span class="s1">&#39;location&#39;</span><span class="o">:</span> <span class="nx">place</span><span class="p">,</span> <span class="s1">&#39;time&#39;</span><span class="o">:</span> <span class="nx">time</span><span class="p">.</span><span class="nx">toLocaleTimeString</span><span class="p">()</span> <span class="p">}</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="nx">request</span><span class="p">(</span><span class="nx">options</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">client</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Some error occured&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The package.json declares the dependency on <code>sockjs</code> and <code>request</code>.</p>

<figure class='code'><figcaption><span>package.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;quake-prab&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&quot;engines&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;node&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;= 0.6.0&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;npm&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;= 1.0.0&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;request&quot;</span><span class="p">:</span> <span class="s2">&quot;*&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;sockjs-client-ws&quot;</span><span class="p">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;private&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;main&quot;</span><span class="p">:</span> <span class="s2">&quot;client.js&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Possible improvements</h4>

<p>This project is quick and dirty. It is just re-wiring of stuff lying on the web. There are bunch of possible improvements here. Some of them are:</p>

<ul>
<li>Only notify if the quake has intensity greater than 4.5</li>
<li>Only notify if the quake has struck in neighbouring countries like Nepal, Bhutan, Pakistan, India</li>
<li>Provide an endpoint to let user register his/her mobile number on which SMSes can be sent.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Find below]]></title>
    <link href="http://prabhakar97.github.io/blog/2015/04/21/find-below/"/>
    <updated>2015-04-21T03:22:00-04:00</updated>
    <id>http://prabhakar97.github.io/blog/2015/04/21/find-below</id>
    <content type="html"><![CDATA[<p>This is a small piece of snippet that can go into your <code>.zshrc</code> and make your life easier sometimes. This whips up a new command named <code>findbelow</code> for you. This command takes as argument, a string and returns all the files below your current directory whose names contain the entered string as a substring.</p>

<figure class='code'><figcaption><span>findbelow</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>findbelow <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  find ./ -regex <span class="s2">&quot;.*/$1.*&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Bonus</h3>

<p>The below piece of snippet enables you to jump n directories upwards from your current <code>pwd</code> by typing <code>u n</code>. For example: <code>u 5</code> will take you 5 directories up from your current position.</p>

<figure class='code'><figcaption><span>u</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>u <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">set</span> -A ud
</span><span class='line'>  ud<span class="o">[</span>1+<span class="k">${</span><span class="nv">1</span><span class="p">-1</span><span class="k">}</span><span class="o">]=</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="k">${</span><span class="p">(j:../:)ud</span><span class="k">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This has been tested on zsh.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Metaprogramming 101 in Ruby]]></title>
    <link href="http://prabhakar97.github.io/blog/2014/03/01/metaprogramming-101-in-ruby/"/>
    <updated>2014-03-01T23:36:00-05:00</updated>
    <id>http://prabhakar97.github.io/blog/2014/03/01/metaprogramming-101-in-ruby</id>
    <content type="html"><![CDATA[<p>Metaprogramming is fun! Dynamically modifying a program garners a lot of power to the programmer. In this post I show an example situation which is beautifully solved by metaprogramming.
I am a Ruby dilettante.</p>

<h4>The situation</h4>

<p>I wanted to develop a plugin framework for a side project of mine. There is a higher level class, which should delegate methods calls on itself to the plugin implementer class.
Although, OOPS has a standard solution for this situation using interfaces but here is the beauty and elegance of metaprogramming in ruby.
The code below is the constructor of the higher level class which checks the passed plugin object for interface&rsquo;s implementation and then defines those methods in itself delegating the actual calls to the passed plugin object.</p>

<h4>The solution</h4>

<figure class='code'><figcaption><span>Dynamically defining methods</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">provider</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># Check whether the interface is implemented or not</span>
</span><span class='line'>  <span class="n">interface</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="ss">:get</span><span class="p">,</span> <span class="ss">:put</span><span class="p">,</span> <span class="ss">:entries</span><span class="p">,</span> <span class="ss">:move</span><span class="p">,</span> <span class="ss">:rm!</span><span class="p">,</span> <span class="ss">:mkdir</span><span class="p">,</span> <span class="ss">:file?</span><span class="p">,</span> <span class="ss">:directory?</span><span class="p">,</span> <span class="ss">:exists?</span><span class="p">,</span> <span class="ss">:makedirs</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'>  <span class="n">interface</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">method</span><span class="o">|</span>
</span><span class='line'>    <span class="k">raise</span> <span class="s2">&quot;Plugin is not supported&quot;</span> <span class="k">unless</span> <span class="n">provider</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="nb">method</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="vi">@provider</span> <span class="o">=</span> <span class="n">provider</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Define the methods supported by provider in this class too</span>
</span><span class='line'>  <span class="n">interface</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="nb">method</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:define_method</span><span class="p">,</span> <span class="nb">method</span><span class="p">)</span> <span class="k">do</span> <span class="o">|*</span><span class="n">splat</span><span class="o">|</span>
</span><span class='line'>      <span class="vi">@provider</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="nb">method</span><span class="p">,</span> <span class="o">*</span><span class="n">splat</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Boy, so simple it is with ruby! And yeah, I love splat operator!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress syntax highlighting issue on Arch Linux]]></title>
    <link href="http://prabhakar97.github.io/blog/2014/01/27/octopress-syntax-highlighting-issue-on-arch-linux/"/>
    <updated>2014-01-27T00:39:00-05:00</updated>
    <id>http://prabhakar97.github.io/blog/2014/01/27/octopress-syntax-highlighting-issue-on-arch-linux</id>
    <content type="html"><![CDATA[<p>If you run Arch Linux and are trying to run <code>rake generate</code> on a Octopress blog, with a post that uses some code and syntax highlighting markdown over it; you will probably see this error:</p>

<pre><code>/plugins/pygments_code.rb:27:in `rescue in pygments': Pygments can't parse unknown language: ruby. (RuntimeError)
</code></pre>

<p>This happens because Arch uses <code>python3</code> as default python, while the world hasn&rsquo;t yet made up their mind to switch. The <em>Pygments</em> gem that Octopress uses, uses <code>python2</code> syntax which Arch&rsquo;s <code>python3</code> doesn&rsquo;t undertand fully and hence raises an error. To fix this, just open this file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~/.rbenv/versions/2.1.0/lib/ruby/gems/2.1.0/gems/pygments.rb-0.3.4/lib/pygments/mentos.py
</span></code></pre></td></tr></table></div></figure>


<p>Use your own version, instead of <code>2.1.0</code> that I am using. Change the first line:</p>

<figure class='code'><figcaption><span>mentos.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python </span>
</span></code></pre></td></tr></table></div></figure>


<p>to</p>

<figure class='code'><figcaption><span>mentos.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python2 </span>
</span></code></pre></td></tr></table></div></figure>


<p>After this, your <code>rake generate</code> should succeed. Oh, and yes, this file path is for <code>rbenv</code>. If you use <code>rvm</code> figure out your own path using the command <code>find ~/ -name mentos.py</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby script to generate 3D subtitles from srt files]]></title>
    <link href="http://prabhakar97.github.io/blog/2014/01/27/script-to-generate-3d-subtitles-from-srt-files/"/>
    <updated>2014-01-27T00:09:00-05:00</updated>
    <id>http://prabhakar97.github.io/blog/2014/01/27/script-to-generate-3d-subtitles-from-srt-files</id>
    <content type="html"><![CDATA[<p>So, you&rsquo;ve got a bunch of 3D movies with SRT subtitles which your 3D TV can play from a USB storage and show the subtitles correctly but can not if you are running the movie on your laptop and sending the display to TV over HDMI; for obvious reasons.
The solution is to use <em>.ass</em> format subtitles with your media player(I recommed mplayer/smplayer). Just run this script from a directory that contains all your movies in separate directories under that directory. Make sure, <code>srt</code> file is present in each 3D movie directory and has the same name as the movie file. Also make sure, the directories for 3D movies have 3D in their names somewhere. Moreover, you must have the program <code>sub3dtool</code> installed. Get it from <a href="https://code.google.com/p/sub3dtool/">here</a>. After you run the script, all your 3D movie directories will be populated with .ass files automatically. Remember, VLC media player does not play well with <code>.ass</code> subtitles. It skips many dialogues.</p>

<figure class='code'><figcaption><span>Convert SRT subtitles into ASS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">entries</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">file</span><span class="o">.</span><span class="n">include?</span> <span class="s2">&quot;3D&quot;</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;3D movie found - </span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="s2">. Going ahead to generate .ass subtitle for it&quot;</span>
</span><span class='line'>    <span class="no">Dir</span><span class="o">.</span><span class="n">entries</span><span class="p">(</span><span class="n">file</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file1</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">file1</span><span class="o">.</span><span class="n">include?</span> <span class="s2">&quot;.srt&quot;</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;Found srt file: </span><span class="si">#{</span><span class="n">file1</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">outfile_name</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">file1</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="n">file1</span><span class="o">.</span><span class="n">length</span><span class="o">-</span><span class="mi">3</span><span class="o">]</span><span class="si">}</span><span class="s2">ass&quot;</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;Out file name : </span><span class="si">#{</span><span class="n">outfile_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="sb">`sub3dtool &quot;</span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="sb">/</span><span class="si">#{</span><span class="n">file1</span><span class="si">}</span><span class="sb">&quot; --3dsbs -o &quot;</span><span class="si">#{</span><span class="n">file</span><span class="si">}</span><span class="sb">/</span><span class="si">#{</span><span class="n">outfile_name</span><span class="si">}</span><span class="sb">&quot;`</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;Generated successfully&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>All the movie directories will be populated with corresponding <em>.ass</em> files. Now just run it by <code>mplayer -ass movie_file_name</code>. Use <code>j</code> to cycle through subtitles, <code>f</code> for fullscreen, <code>q</code> to quit mplayer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://prabhakar97.github.io/blog/2013/07/28/hello-world/"/>
    <updated>2013-07-28T01:11:00-04:00</updated>
    <id>http://prabhakar97.github.io/blog/2013/07/28/hello-world</id>
    <content type="html"><![CDATA[<p>Alright fellas, I have switched to Octopress being a ruby lover. I will be posting about code and code and more code in this blog. Mainly there will be lots of scripts that make my daily chores easier, some fixes from my experiences, some puzzle solving and liitle more code.</p>
]]></content>
  </entry>
  
</feed>
